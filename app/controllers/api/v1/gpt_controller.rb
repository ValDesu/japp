require 'faraday'
class Api::V1::GptController < ApplicationController

    def generateJapanese
        conn = Faraday.new('https://api.openai.com/v1/chat/completions') do |faraday|
            faraday.headers['Authorization'] = "Bearer #{ENV['gpt_api_key']}"
            faraday.headers['Content-Type'] = 'application/json'
            faraday.adapter Faraday.default_adapter
        end

        schema = {
            type: "object",
            properties: {
                sentence_difficulty: {
                    type: "string",
                    description: "sentence difficulty : JLPT level between N5 and N1",
                    enum: ["N5", "N4", "N3", "N2", "N1"]
                },
                japanese_sentence: {
                    type: "string",
                    description: "the generated long sentece in japanese"
                },
                japanese_sentence_reading: {
                    type: "string",
                    description: "the generated sentence in japanese with furigana"
                }
            },
            required: ["sentence_difficulty", "japanese_sentence", "japanese_sentence_reading"]
        }

        response = conn.post do |req|
            req.body = {
                model: "gpt-3.5-turbo-0613",
                temperature: 1.1,
                max_tokens: 255,
                messages: [
                    {
                        role: "system",
                        content: "Pretend to be a Japanese teacher. You're an expert at creating exercices: given words you make sentences for the student to translate."
                    },
                    {
                        role: "user",
                        content: "return a long sentence using at least the all the following words : #{params['cards']}."
                    }],
                functions: [{
                    name: "set_japanese_sentence",
                    description:"display the japanese sentence generated by the AI",
                    parameters: schema
                }],
                function_call: {name: "set_japanese_sentence"}
                }.to_json
        end

        puts "sending request"
        if response.status == 200
            puts "success"
            # Parse the JSON response
            render json: response.body
        else
            puts "error"
            render json: response
        end
    end

    def generateEnglish
        conn = Faraday.new('https://api.openai.com/v1/chat/completions') do |faraday|
            faraday.headers['Authorization'] = "Bearer #{ENV['gpt_api_key']}"
            faraday.headers['Content-Type'] = 'application/json'
            faraday.adapter Faraday.default_adapter
        end
        
        schema = {
            type: "object",
            properties: {
                sentence_difficulty: {
                    type: "string",
                    description: "sentence difficulty : CECRL level between A1 and C2",
                    enum: ["A1", "A2", "B1", "B2", "C1", "C2"]
                },
                english_sentence: {
                    type: "string",
                    description: "the generated long sentence in english"
                },
                english_words: {
                    type: "array",
                    description: "The english translation of the used words in the sentence the student will have to translate",
                    items: {type: "string"}
                }
            },
            required: ["sentence_difficulty", "english_sentence", "english_words"]
        }

        response = conn.post do |req|
            req.body = {
                model: "gpt-3.5-turbo-0613",
                temperature: 1.1,
                max_tokens: 255,
                messages: [
                    {
                        role: "system",
                        content: "You are a Japanese teacher for english students. You're an expert at creating exercices: given words you make sentences for the student to translate."
                    },
                    {
                        role: "user",
                        content: "return a long english sentence with this set of japanese words : #{params['cards']}. The student will have to translate it."  
                    }],
                functions: [{
                    name: "set_english_sentence",
                    description:"display the english sentence generated by the AI",
                    parameters: schema
                }],
                function_call: {name: "set_english_sentence"}
                }.to_json
        end

        puts "sending request"
        if response.status == 200
            puts "success"
            # Parse the JSON response
            render json: response.body
        else
            puts "error"
            render json: response
        end
    end

    def correctEnglish
        conn = Faraday.new('https://api.openai.com/v1/chat/completions') do |faraday|
            faraday.headers['Authorization'] = "Bearer #{ENV['gpt_api_key']}"
            faraday.headers['Content-Type'] = 'application/json'
            faraday.adapter Faraday.default_adapter
        end

        schema = {
            type: "object",
            properties: {
                grade: {
                    type: "integer",
                    description: "grade for the student translation between 0 and 10",
                    enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ,10]
                },
                proposed_correction: {
                    type: "string",
                    description: "Japanese teacher's own english translation"
                },
                advice_grammar: {
                    type: "string",
                    description: "advice or tips about the grammar used in japanese sentence, tell everything that is wrong with the student's translation and how to fix it",
                },
                advice_general: {
                    type: "string",
                    description: "general advice or tips for the student to do better next time. If the student have a good grade, be more severe. use emojis to make it more fun",
                }
            },
            required: ["grade", "proposed_correction", "advice_grammar", "advice_general"]
        }

        response = conn.post do |req|
            req.body = {
                model: "gpt-3.5-turbo-0613",
                temperature: 0.9,
                max_tokens: 255,
                messages: [
                    {
                        role: "system",
                        content: "Pretend to be a Japanese teacher. You're an expert at teaching, giving good advices and grading students. You're giving the most native-like answers."
                    },
                    {
                        role: "user",
                        content: "This japanese sentence \"#{params['japanese_sentence']}\" has been translated by a student in english as \"#{params['english_sentence']}\""
                    }],
                functions: [{
                    name:"set_correction",
                    description:"display the correction and the grade given by the teacher",
                    parameters: schema}],
                function_call: {name: "set_correction"}
                }.to_json
        end

        puts "sending request"
        if response.status == 200
            puts "success"
            # Parse the JSON response
            render json: response.body
        else
            puts "error"
            render json: response
        end
    end

    def correctJapanese
        conn = Faraday.new('https://api.openai.com/v1/chat/completions') do |faraday|
            faraday.headers['Authorization'] = "Bearer #{ENV['gpt_api_key']}"
            faraday.headers['Content-Type'] = 'application/json'
            faraday.adapter Faraday.default_adapter
        end


        schema = {
            type: "object",
            properties: {
                grade: {
                    type: "integer",
                    description: "grade for the student translation between 0 and 10",
                    enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ,10]
                },
                proposed_correction: {
                    type: "string",
                    description: "Japanese teacher's own japanese translation"
                },
                advice_grammar: {
                    type: "string",
                    description: "advice or tips about the grammar used in japanese proposed correction, tell everything that is wrong with the sentence and how to fix it",
                },
                advice_general: {
                    type: "string",
                    description: "general advice or tips for the student to do better next time. If the student have a good grade, be more severe. use emojis to make it more fun",
                }
            },
            required: ["grade", "proposed_correction", "advice_grammar", "advice_general"]
        }

        response = conn.post do |req|
            req.body = {
                model: "gpt-3.5-turbo-0613",
                temperature: 0.9,
                max_tokens: 255,
                messages: [
                    {
                        role: "system",
                        content: "Pretend to be a Japanese teacher. You're an expert at teaching, giving good advices and grading students. You're giving the most native-like answers."
                    },
                    {
                        role: "user",
                        content: "This english sentence \"#{params['japanese_sentence']}\" has been translated by a student in japanese as \"#{params['english_sentence']}\""
                    }],
                functions: [{
                    name:"set_correction",
                    description:"display the correction and the grade given by the teacher",
                    parameters: schema}],
                function_call: {name: "set_correction"}
                }.to_json
        end

        puts "sending request"
        if response.status == 200
            puts "success"
            # Parse the JSON response
            render json: response.body
        else
            puts "error"
            render json: response
        end
    end

end